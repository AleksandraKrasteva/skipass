import org.gradle.api.tasks.testing.Test

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.owasp.dependencycheck" version "7.3.2"
    id 'jacoco'
}

group = 'com.skipass'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:rabbitmq'

}

tasks.named('test') {
    useJUnitPlatform()
}

dependencyCheck {
    failBuildOnCVSS = 4
    format = 'HTML'
}

test {
    finalizedBy jacocoTestReport
}

task unitTests(type: Test) {
    useJUnitPlatform {
        excludeTags 'integration'
    }
    description 'run integration tests'
    finalizedBy jacocoTestReport
}

task integrationTests(type: Test) {
    useJUnitPlatform {
        excludeTags 'unit'
    }
    description 'run unit tests'
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
//    dependsOn unitTests
//    dependsOn integrationTests
//    executionData(unitTests, integrationTests)
//
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/skipass/postmanagement/domain",
                    "com/skipass/postmanagement/persistance",
                    "com/skipass/userservice/business/PostService.java",
                    "com/skipass/userservice/business/ReactionService.java"

            ])
        }))
    }
}